{
    "新增E2E測試": {
        "prefix": "new-test-e2e",
        "body": [
            "type ${1:測試名稱}TestArg = {",
            "  header: Record<string, string>;",
            "  body: Record<string, any>;",
            "};",
            "type ${1:測試名稱}TestRes = { status: HttpStatus; body: IResponse<any> };",
            "type ${1:測試名稱}TestEnv = {",
            "  ${TM_FILENAME/(.*)\\..+$/$1/}Service: IUserService;",
            "};",
            "",
            "class ${1:測試名稱}Test extends TestSuitWithEnv<",
            "  App,",
            "  ${1:測試名稱}TestArg,",
            "  ${1:測試名稱}TestRes,",
            "  ${1:測試名稱}TestEnv",
            "> {",
            "  static readonly ID: number = 1;",
            "  static passedArg(): ${1:測試名稱}TestArg {",
            "    return {",
            "      header: {",
            "        Authorization: `Bearer ${this.ID}`,",
            "      },",
            "      body: {",
            "        first_name: '1',",
            "        last_name: '1',",
            "        password: '1',",
            "        birthday: '2013-08-02T20:13:14Z',",
            "        gender: 1,",
            "      },",
            "    };",
            "  }",
            "",
            "  protected testcasesClasses: TestCaseClass<${1:測試名稱}TestArg, ${1:測試名稱}TestRes>[] = [",
            "    ${1:測試名稱}PassCase,",
            "    ${1:測試名稱}NoAuthCase,",
            "    ${1:測試名稱}WrongInputFirstNameCase,",
            "    ${1:測試名稱}SystemFailCase,",
            "    ${1:測試名稱}ErrorCase,",
            "  ];",
            "",
            "  async execute(",
            "    testcase: TestCaseWithEnv<${1:測試名稱}TestArg, ${1:測試名稱}TestRes, ${1:測試名稱}TestEnv>,",
            "    testTargetGetter: () => App,",
            "  ) {",
            "    const testTarget = testTargetGetter();",
            "    const arg = testcase.initArg();",
            "    const expectRes = testcase.initRes();",
            "",
            "    const body = arg.body;",
            "    const actualRes = await request(testTarget)",
            "      .${2|get,post,put,delete|}(`/${TM_FILENAME/(.*)\\..+$/$1/}`)",
            "      .set(arg.header)",
            "      .send(body);",
            "",
            "    expect(actualRes).toBeDefined();",
            "    {",
            "      const actual = actualRes.body;",
            "      const expected = {",
            "        msg: expectRes.body.msg,",
            "        results: expectRes.body.results,",
            "      } as IResponse<any>;",
            "      expect(actual).toEqual(expected);",
            "    }",
            "    {",
            "      const actual = actualRes.status;",
            "      const expected = expectRes.status;",
            "      expect(actual).toStrictEqual(expected);",
            "    }",
            "  }"
        ],
        "description": "function test"
    },
    "新增測試案例": {
        "prefix": "new-test-case",
        "body": [
            "",
            "class ${1:測試名稱}${2:案例名稱}Case extends TestCaseWithEnv<",
            "  ${1:測試名稱}TestArg,",
            "  ${1:測試名稱}TestRes,",
            "  ${1:測試名稱}TestEnv",
            "> {",
            "  private _mockUserService${1:測試名稱}UserAsyncFn: jest.SpyInstance<",
            "    Promise<Response<${3:Response}>>,",
            "    [vo: ${1:測試名稱}Vo],",
            "    any",
            "  >;",
            "",
            "  additionalCheck(",
            "    testTargetGetter: () => App,",
            "    testEnvGetter: () => ${1:測試名稱}TestEnv,",
            "  ) {",
            "    {",
            "      const actual = this._mockUserService${1:測試名稱}UserAsyncFn;",
            "      const expected = 1;",
            "      expect(actual).toHaveBeenCalledTimes(expected);",
            "    }",
            "    {",
            "      const actual = this._mockUserService${1:測試名稱}UserAsyncFn.mock.calls[0][0];",
            "      const arg = this.initArg();",
            "      const expected = plainToInstance(${1:測試名稱}Vo, arg.body);",
            "      expected.id = ${1:測試名稱}Test.ID;",
            "      expect(actual).toEqual(expected);",
            "    }",
            "  }",
            "",
            "  initEnv(testEnvGetter: () => ${1:測試名稱}TestEnv) {",
            "    const { userService } = testEnvGetter();",
            "    this._mockUserService${1:測試名稱}UserAsyncFn = jest",
            "      .spyOn(userService, 'updateAsync')",
            "      .mockImplementation(async (vo) => newResponse<${3:Response}>());",
            "  }",
            "",
            "  initArg(): ${1:測試名稱}TestArg {",
            "    const res = ${1:測試名稱}Test.passedArg();",
            "    res.body['email'] = '1@2.tw';",
            "    return res;",
            "  }",
            "",
            "  initRes(): ${1:測試名稱}TestRes {",
            "    return {",
            "      status: HttpStatus.ACCEPTED,",
            "      body: newResponse<${3:Response}>(),",
            "    };",
            "  }",
            "}"
        ],
        "description": "function test case"
    }
}